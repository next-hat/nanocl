name: Release

on:
  push:
    branches:
      - 'nightly-*'
  pull_request:
    branches:
      - 'nightly-*'
    types: [opened, synchronize, closed]

env:
  CARGO_TERM_COLOR: always

jobs:
  release_image:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Cache register
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: buildx-cache
    - name: Set branch name
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
    - name: Print branch name
      run: echo $BRANCH_NAME
    - name: Get bin name
      run: echo "BINARY_NAME=$(echo $BRANCH_NAME | awk -F- '{print $2}')" >> $GITHUB_ENV
    - name: Set version
      run: echo "VERSION=$(echo $BRANCH_NAME | awk -F- '{print $3}')" >> $GITHUB_ENV
    - name: Print BINARY_NAME and VERSION
      run: |
        echo $BINARY_NAME
        echo $VERSION
    - name: Build image
      run: docker buildx build --load --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache -t $BINARY_NAME:nightly-$VERSION -f ./bin/nanocld/Dockerfile .
    - name: Export image
      run: docker save $BINARY_NAME:nightly-$IMAGE_VERSION | gzip > /tmp/$BINARY_NAME-nightly-$IMAGE_VERSION.tar.gz
    - name: Test if release already exists
      id: release-exists
      continue-on-error: true
      run: gh release view $BINARY_NAME-nightly-$IMAGE_VERSION
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Create new draft release
      if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
      run: gh release create -d v$IMAGE_VERSION --generate-notes /tmp/$BINARY_NAME-nightly-$IMAGE_VERSION.tar.gz#nanocld-image
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Update draft release
      if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
      run: >-
        gh release delete-asset -y v$IMAGE_VERSION nanocl.$IMAGE_VERSION.tar.gz;
        gh release upload v$IMAGE_VERSION /tmp/$BINARY_NAME-nightly-$IMAGE_VERSION.tar.gz#nanocld-image;
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
