name: Draft nightly image

on:
  push:
    branches:
    - 'release-nightly-ctrlproxy-*'
    - 'release-nightly-ctrldns-*'
    - 'release-nightly-nanocld-*'
  pull_request:
    branches:
    - 'release-nightly-ctrlproxy-*'
    - 'release-nightly-ctrldns-*'
    - 'release-nightly-nanocld-*'
    types: [opened, synchronize, closed]

env:
  CARGO_TERM_COLOR: always

jobs:
  release_image:
    runs-on: bigben

    steps:
    - uses: actions/checkout@v3
    # Install buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    # Set buildx cache
    - name: Cache register
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: buildx-cache
    # Extract branch info
    - name: Set info
      run: |
        echo "BRANCH_NAME=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "CHANNEL=$(echo ${GITHUB_REF##*/} | awk -F- '{print $2}')" >> $GITHUB_ENV
        echo "NANOCL_CHANNEL=$(echo ${GITHUB_REF##*/} | awk -F- '{print $2}')" >> $GITHUB_ENV
        echo "BINARY_NAME=$(echo ${GITHUB_REF##*/} | awk -F- '{print $3}')" >> $GITHUB_ENV
        echo "VERSION=$(echo ${GITHUB_REF##*/} | awk -F- '{print $5}')" >> $GITHUB_ENV
    # Print info for debug
    - name: Print Info
      run: |
        echo $BRANCH_NAME
        echo $BINARY_NAME
        echo $CHANNEL
        echo $VERSION
    # Build daemon image
    - name: Build image
      run: docker buildx build --load --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/buildx-cache --build-arg channel=$CHANNEL -t $BINARY_NAME:nightly-$VERSION -f ./bin/$BINARY_NAME/Dockerfile .
    # Export it as tar.gz
    - name: Export image
      run: docker save $BINARY_NAME:nightly-$VERSION | gzip > /tmp/$BINARY_NAME-nightly-$VERSION.tar.gz
    # Upload it to release
    - name: Test if release already exists
      id: release-exists
      continue-on-error: true
      run: gh release view $BINARY_NAME-nightly-$VERSION
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Create new draft release
      if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
      run: gh release create -t $BINARY_NAME-nightly-$VERSION -d $BINARY_NAME-nightly-$VERSION -F ./bin/$BINARY_NAME/changelog.md /tmp/$BINARY_NAME-nightly-$VERSION.tar.gz#$BINARY_NAME-image;
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Update draft release
      if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
      run: |
        gh release delete-asset -y $BINARY_NAME-nightly-$VERSION $BINARY_NAME-nightly-$VERSION.tar.gz
        gh release upload $BINARY_NAME-nightly-$VERSION /tmp/$BINARY_NAME-nightly-$VERSION.tar.gz#$BINARY_NAME-image;
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
